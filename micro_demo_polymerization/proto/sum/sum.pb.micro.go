// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sum.proto

package sum

import (
	"fmt"
	"github.com/golang/protobuf/proto"
	"math"
)

import (
	"context"
	"github.com/micro/go-micro/client"
	"github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Sum service

type SumService interface {
	TestSum(ctx context.Context, in *TestSumReq, opts ...client.CallOption) (*TestSumRes, error)
}

type sumService struct {
	c    client.Client
	name string
}

func NewSumService(name string, c client.Client) SumService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "sum"
	}
	return &sumService{
		c:    c,
		name: name,
	}
}

func (c *sumService) TestSum(ctx context.Context, in *TestSumReq, opts ...client.CallOption) (*TestSumRes, error) {
	req := c.c.NewRequest(c.name, "Sum.TestSum", in)
	out := new(TestSumRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sum service

type SumHandler interface {
	TestSum(context.Context, *TestSumReq, *TestSumRes) error
}

func RegisterSumHandler(s server.Server, hdlr SumHandler, opts ...server.HandlerOption) error {
	type sum interface {
		TestSum(ctx context.Context, in *TestSumReq, out *TestSumRes) error
	}
	type Sum struct {
		sum
	}
	h := &sumHandler{hdlr}
	return s.Handle(s.NewHandler(&Sum{h}, opts...))
}

type sumHandler struct {
	SumHandler
}

func (h *sumHandler) TestSum(ctx context.Context, in *TestSumReq, out *TestSumRes) error {
	return h.SumHandler.TestSum(ctx, in, out)
}
