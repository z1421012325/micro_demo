// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sub.proto

package sub

import (
	"fmt"
	"github.com/golang/protobuf/proto"
	"math"
)

import (
	"context"
	"github.com/micro/go-micro/client"
	"github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Sub service

type SubService interface {
	TestSub(ctx context.Context, in *TestSubReq, opts ...client.CallOption) (*TestSubRes, error)
}

type subService struct {
	c    client.Client
	name string
}

func NewSubService(name string, c client.Client) SubService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "sub"
	}
	return &subService{
		c:    c,
		name: name,
	}
}

func (c *subService) TestSub(ctx context.Context, in *TestSubReq, opts ...client.CallOption) (*TestSubRes, error) {
	req := c.c.NewRequest(c.name, "Sub.TestSub", in)
	out := new(TestSubRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sub service

type SubHandler interface {
	TestSub(context.Context, *TestSubReq, *TestSubRes) error
}

func RegisterSubHandler(s server.Server, hdlr SubHandler, opts ...server.HandlerOption) error {
	type sub interface {
		TestSub(ctx context.Context, in *TestSubReq, out *TestSubRes) error
	}
	type Sub struct {
		sub
	}
	h := &subHandler{hdlr}
	return s.Handle(s.NewHandler(&Sub{h}, opts...))
}

type subHandler struct {
	SubHandler
}

func (h *subHandler) TestSub(ctx context.Context, in *TestSubReq, out *TestSubRes) error {
	return h.SubHandler.TestSub(ctx, in, out)
}
